번역이 불안정해 미완성 [*] 


최근 수정 : 2018/09/02 

-C1-  요약

	self-protection
	-커널 단계 에서 자체 구현 하는 백신이 많음 
	-일부 백신은 유저 단계에서 구현한다.
	
	AV는 커널 단계에서 사용하는 기능이 들어가있음
	검색엔진, 서명, 압축풀기, 에뮬레이터 지원

-C2- 리버싱

	사용 툴 : IDA, IDA python, windbg, gdb, winelib, bindiff, pydbg[*] 

	IDA : 정적 분석에 사용
	IDA python : 자동화
	windbg : 동적 분석에 사용
	gdb : 리눅스 버전 동적 분석	
	winelib : 리눅스 버전에서 동적으로 커널 드라이브 분석할때 사용
		  { 시리얼 통신 }
	bindiff : 바이너리 비교 툴 
		  { 리눅스에서는 심볼이 살아있을수도 있음 이걸 windows 버전으로 옮겨서 쉽게 분석 }
	

	백신 일부는 중압 집중식 서버에서 실행하게 설계 되어있음
	
	커널 디버깅을 위해 가상머신을 사용한다 -> 운영체제 부팅 옵션 제한
	
	bcdedit /debug on : 커널 디버깅 사용
	bcdedit /dbgsettings serial debugport:1 baudrate:115200 : 글로벌 디버깅 설정 및 시리얼 통신 속도 설정
	
	가상 머신에서 시리얼 통신 포트를 개방 해줌 COM1 포트	
	- COM1 포트와 가상머신 커널 통신

	.sympath srv*http://msdl.microsoft.com/download/symbols
	.reload
	-> windbg 재로드
	
	!process 0 0 -> 커널단 프로세서 나열

	!process 0 0 fssm32.exe -> 이름으로 나열 
	--> PROCESS [주소] : [주소]는 eprocess 의 구조체

	.process /r /p [eprocess] -> 모든 심볼 나열

	
	[ 퍼징은 리눅스에서 더 빠름 ] 

	

	대부분의 안티 바이러스는 서버로 파일의 해시검사 하고 전송해 파일이 악성 코드인지를 검증
	이때 통신 소켓 파일을 찾아 소켓을 생성하고 직접 파일의 해시를 전송함으로서 백신 서버와 통신 가능

	
-C3- 플러그인 로딩

	플러그인 로딩은 R,W,X 메로리 페이지에 할당된다. 
	
	할당된 메모리가 적절하다면 내용과 해독 및 압축을 해제 한다. 

	이후 쓰기권한을 삭제한다, 또한 플러그인을 dll 파일로 제공하여 단순화 시킨 데이터를 난독화 시킨다. 
	
	-memory Scanners 
		userland = openPorcess, ReadProcess memory : win32API 를 사용하여 제공한다.
		kernel = IOCTL : AV 회사가 직접 만ㄷ르어 사용해야함

	플러그인은 스크립트로 작성될수있음 => lua script, .net
	커널 드라이버는 C or C++, 일부는 .net

	.net 으로 작성되어있으면 머리가 아파진다고 한다. 이에 대한 방법
		- 1. 코드가 가상시스템용인지 식별 한다.
		- 2. 가상 컴퓨터가 지원하는 전체 명령 집합 확인
		- 3. 플러그인의 루틴 바이트가 위치한곳을 덤프
		- 4. 특정 가상파일에 구현된 플러그인 분석 시작


-C4- 안티 바이러스 시그니쳐의 이해

	우회방법 1. 서명에 1byte를 추가 하는 방법 ( 해시를 비교하는 부분 우회 ) : 해싱 비교 기법 : ssdeep 프로그램 동작 방식 사용 
	

-C5- 업데이트 시스템

	서명을 다운로드할땐 http, https, 간혹가다 ftp[오래된 제품] 
	
	해시를 보고 오래된 버전과 새로운 버전을 구별하여 다운로드 받음
	책에선 해시만 다르면 다운로드 받는다고 적혀있음

	ssl 통신 중 가능한 공격 기법
	
	1.domain name system 변경 가능할때 
	- > 당연하게도 악의적인 파일 다운로드 시킴
	
	2. MITM
	- > 같은 네트워크 망에 있으면 파일을 수정 하여 공격가능 

	

	ssl 통신 중 발견될수 있는 취약점
	- > server 의 인증서 호가인 없이 SSL/TLS 사용
	- > CA 인증기관이 없을경우 [자체 적인 사용] --> MITM 가능
	- > 유효 하지만 만료된 인증서 수락 

	[Verifying the Update Files]
	- > 번역문제 때문에 보류

	업데이트 패킷 조사
		1. 와이어 샤크로 패킷 캡쳐

		2. xml 파일과 대조

		3. 프로토콜 분석

		4. 취약점 탐색[서명 체크] 

	보안을 신경쓰지 않은 업데이트는 인증서 관련 공격에 취약할 수 있음
	예전 사례로 디피 헬만 키교환이 8비트로 구성되어 쉽게 공격이 가능


-C6- 안티 바이러스 소프트웨어 우회 


	바이러스 탐색 기법
	1. 알려진 바이러스 해시 검사
	2. PE헤더 조사 --> 오프셋 으로 검사함 내용이 추가 되어 있는지
	3. 인스트럭트 검사



-C7- 전자서명 우회방법
	1. 바이러스인지 탐색하는 부분에서 로지컬 에러를 찾는다. 책에선 사이즈를 비교하는 분기문을 통과 시켰다. 
	[PE]
		-PE file 
			- PE 파일은 다른 프로그램 없이 자체적으로 실행 가능한 프로그램을 말한다.
			- [오역 일수도 있음] PE 파일은 파일자체를 손상시키지 않고 변경할 수 있는 방법이 많다.
		[section name]
			바이러스 검사시 섹션 네임을 보고 검사를 하는 백신이 존재한다. 이 부분을 수정할수도 있는것 			  같다.
		[TimeDateStamp] 
			시간으로 바이러스 탐지 증거로 사용하지만 이 타임데이트스탬프 영역은 마음대로 변경가능하고 			  NULL로 변경 까지 가능하다.
		[Major/Minor operatingSystemVersion]
			이 친구는 타임데이트스탬프와 완전히 일치한다고 합니다.
		[File Length]
			파일이 비정상적으로 크면 어떤 백신은 검출을 무시하기도 함, 이유는 대부분의 바이러스가 용량			  이 작기 때문임 

		[****] PE탐지 우회는 정말 많은 방법이 있다. 때문에 작성자도 Ange Albertini의 wiki를 확인하란다.


	2. 자바 스크립트 
		많은 악성 코드들은 자바 스크립트로 제작 되어 있음
		
		첫번째로 문자를 인코딩 하는 방법이다. XSS,Sql injection 등 우회 방법과 동일	
		
		두번째로 코드 삽입 기술이다. 많은 문자열을 입력받고 실행하는 코드가 존재하기 떄문에 이런 방법도 된		  다고 한다.
		
		세번째는 자바스크립트 로지컬에러 정크코드 실행 부분인데 이해가 안간다. 번역이 어렵다; [*]

	3. PDF
		-1.PDF는 엄청난 헤더와 크기 떄문에 안티 바이러스에서 검출이 사실상 불가능하다.
                 때문에 hash 검사하는 기법을 사용한다. 
		pdf에 사용되는 공격코드는 자바스크립트가 대부분 유형이며 자바스크립트의 모든 문자열을		    		  인코딩 시켜서 올리는 방법이 있다. 이렇게 되면 hash는 달라질것이고 우회가 가능하게 된다. 
		
		-2. PDF 우회 [number] [number2]  obj  ~~~ endobj 형식으로 구성되는데 [number]가 동일하다면 맨 아래 		      선언된 형식을 따라간다. 이런 중복 오브젝트 방식을 백신이 이해하지 못하고 있다면 이부분에 쉘 코			드를 추가하여 공격이 가능하다. 
		    
		--> 이 파트는 스캐너 탐지가 아닌 서명 탐지를 우회하는 기법이다 


	    


	
	
-C8- 스캐너 우회방법
	들어가기 앞서 7장은 서명을 우회하는 방법이라면 8장에서는 PE파일 전체를 우회하는 방법에 대해 논하는 부분이	  다.
	
	finger printing -> 이 부분은 comodo 안티 바이러스 기능중 지문인식 암호화 부분을 말하는데 이 부분은 따로
	요약을 하지 않았습니다.
	

	Target : ClamAV의 PE parser 모듈

		- windows xp 버전에서는 PE 파일에 섹션이 96개 이상 존재하면 PE 파일이 깨진상태로 인식한다.
		  windows vista 버전으로 넘어오면서 섹션의 크기는 커졌고 이에 대한 대응이 없었던 백신은 취약점			    이 생기는 부분을 노렸다.


